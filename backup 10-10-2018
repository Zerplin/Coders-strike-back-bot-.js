
var laps = parseInt(readline());
var checkpointCount = parseInt(readline()); // amount of checkpoints
var cpListx =[]; // list of every checkpoints x coord 
var cpListy=[];// list of every checkpoints y coord 
var opp1Round=0;
var opp2Round=0;
var p1RoundPassed=0;
var op1RoundPassed=0;
var op2RoundPassed=0;
var op1Prevcp=0;
var op2Prevcp=0;
var p1Prevcp=0;
var CpReached = false;
var NextCp = true;
var start =true;
var start2=true;
var start3=false;
var stratX3;
var stratY3;
var Target;
var speed;
var TargetCpID;
var TargetCp;
var TargetX;
var TargetY;
var p2DistToTarget;
var updateTarget=true;
var p1Lead =true;
var n=2;
var offset =
{
    x:0,
    y:0
};
for (var i = 0; i < checkpointCount; i++) 
{
    var inputs = readline().split(' ');
    var checkpointX = parseInt(inputs[0]);
    var checkpointY = parseInt(inputs[1]);
    
    cpListx[i]=checkpointX; // gets x and y coord and stores them in relevant index (i)
    cpListy[i]=checkpointY;
    
    //printErr(cpListx[i],cpListy[i]);
}



/////////////////////////////////////////////////////////////////////////////////////


// todo split this function up in chunks so code for pod1 also can run and dynamically compute next moves
// for pod 2 
// example if stage 3 start block if stage 2 get to cp if stage 1 check if can make it to cp first
////////////////////////////////////////////////////////////////////////////////////////////////
function getBlockCp1()
{
    getBlockTarget();
    
    
}

///////////////////////////////////////////////////////////////////////////////////////////
function getBlockCp()
{
    
    /*
    if(getBlockTarget()==1)
    {
        if(start2===true)
        {
            // fix op1nextcp updates ?? maybe
            TargetCpID=(op1Nextcp+n)%checkpointCount;
            Target=(TargetCpID)%checkpointCount;
            stratX3=(cpListx[Target]);
            stratY3=(cpListy[Target]);
            speed=100;
            start2=false;
            
        }
        
        TargetCp = op1Nextcp;
        TargetX=op1x;
        TargetY=op1y;
    }
    
    else
    {
        if(start2===true)
        {
            TargetCpID=(op2Nextcp+n)%checkpointCount;
            Target=(TargetCpID)%checkpointCount;
            stratX3=(cpListx[Target]);
            stratY3=(cpListy[Target]);
            speed=100;
            start2=false;
        }
        
        TargetCp = op2Nextcp;
        TargetX=op2x;
        TargetY=op2y;
    }
    */
    /////////// fix when targets is updated
    getBlockTarget();
    printErr("TargetCp "+TargetCp+" Target "+Target);
   
     if(TargetCp==(Target+1)%checkpointCount)
    {
        printErr("next cp,target escaped");
        printErr("target "+Target)
        if(Target===0)
        {
            Target=checkpointCount-1;
        }
        else
        {
             Target=(Target-1)%checkpointCount;
        }
        
        stratX3=(cpListx[Target]+offset.x);
        stratY3=(cpListy[Target]+offset.y);
        speed=100;
        CpReached=false;
        
        printErr("stratX3 "+stratX3);
        printErr("stratY3 "+stratY3);
    }
    
    printErr("start2 "+start2);
    TargetDistToTargetCP = Math.abs(Math.hypot(cpListx[Target]-TargetX, cpListy[Target]-TargetY));
    p2DistToTarget = Math.abs(Math.hypot(TargetX-p2x, TargetY-p2y));
    p2DistToTargetCp = Math.abs(Math.hypot((cpListx[Target]+offset.x)-p2x, (cpListy[Target]+offset.y)-p2y));
     
    if(p2DistToTargetCp<2000&&CpReached===false)
    {
       speed =Math.floor(speed*(p2DistToTargetCp)/2000);   
       NextCp=false;
    }
    printErr("p2DistToTargetCp "+p2DistToTargetCp);
    printErr("cpreach "+CpReached)
  if(p2DistToTargetCp<=0||CpReached===true||speed===0)
    {
        printErr("cp Reached");
        speed=0;
        NextCp=false;
        CpReached=true;
        stratX3=(TargetX);
        stratY3=(TargetY);
        
      
        if(p2DistToTarget<4500&&TargetCp==Target)
        {
            getBlockCoord();
        }
        //getBlockCoord();
    }
    
    start3=true;
    start2=true;
    //////////////////////////////////////////////////////////////
}


/////////////////////////////////////////////////////////////////////////////////////
function getBlockTarget()
{
    n=3;
    
    //printErr("opp1 R "+opp1Round+" op1cp "+op1Nextcp+"opp2 R "+opp2Round+" op2cp "+op2Nextcp)
    if(op1RoundPassed>op2RoundPassed||op1RoundPassed==op2RoundPassed&&op1Dist<op2Dist)
    {
        if(updateTarget===true)
        {
            // fix op1nextcp updates ?? maybe
            TargetCpID=(op1Nextcp+n)%checkpointCount;
            Target=(TargetCpID)%checkpointCount;
            stratX3=(cpListx[Target]);
            stratY3=(cpListy[Target]);
            speed=100;
            updateTarget=false;
            
        }
        
        TargetCp = op1Nextcp;
        TargetX=op1x;
        TargetY=op1y;
    
        printErr("block target is opp1");
        return 1;
    }
    
    else
    {
        if(updateTarget===true)
        {
            TargetCpID=(op2Nextcp+n)%checkpointCount;
            Target=(TargetCpID)%checkpointCount;
            stratX3=(cpListx[Target]);
            stratY3=(cpListy[Target]);
            speed=100;
            updateTarget=false;
        }
        
        TargetCp = op2Nextcp;
        TargetX=op2x;
        TargetY=op2y;
        printErr("block target is opp2")
        return 2;
    }
}

////////////////////////////////////////////////////////////////////////////////////////
function getCpAngle()
{
    var p1=
    {
        x:cpListx[p1Nextcp],
	    y:cpListy[p1Nextcp]
    };

    
    
	     if(p1Nextcp===0)
        {
            var p3=
            {
            x:cpListx[checkpointCount-1],
	        y:cpListy[checkpointCount-1] 
            };
        }
        else
        {
            var p3=
            {
            x:cpListx[p1Nextcp-1],
	        y:cpListy[p1Nextcp-1]
            }
        }
    

    var p2=
    {
	    x:cpListx[(p1Nextcp+1)%checkpointCount],
	    y:cpListy[(p1Nextcp+1)%checkpointCount]	
    };
    
    var p12 = Math.sqrt(Math.pow((p1.x - p2.x),2) + Math.pow((p1.y - p2.y),2));
    var p13 = Math.sqrt(Math.pow((p1.x - p3.x),2) + Math.pow((p1.y - p3.y),2));
    var p23 = Math.sqrt(Math.pow((p2.x - p3.x),2) + Math.pow((p2.y - p3.y),2));
    
    var resultDegree = Math.acos(((Math.pow(p12, 2)) + (Math.pow(p13, 2)) - (Math.pow(p23, 2))) / (2 * p12 * p13)) * 180 / Math.PI;
    
    return Math.floor(resultDegree);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function getCpP1Angle()
{
    var p1=
    {
        x:cpListx[p1Nextcp],
	    y:cpListy[p1Nextcp]
    };

    
	var p3=
    {
        x:p1x,
	    y:p1y 
    };
       
    
    var p2=
    {
	    x:cpListx[(p1Nextcp+1)%checkpointCount],
	    y:cpListy[(p1Nextcp+1)%checkpointCount]	
    };
    
    var p12 = Math.sqrt(Math.pow((p1.x - p2.x),2) + Math.pow((p1.y - p2.y),2));
    var p13 = Math.sqrt(Math.pow((p1.x - p3.x),2) + Math.pow((p1.y - p3.y),2));
    var p23 = Math.sqrt(Math.pow((p2.x - p3.x),2) + Math.pow((p2.y - p3.y),2));
    
    var resultDegree = Math.acos(((Math.pow(p12, 2)) + (Math.pow(p13, 2)) - (Math.pow(p23, 2))) / (2 * p12 * p13)) * 180 / Math.PI;
    
    return Math.floor(resultDegree);
}

/////////////removed p2vx p2vy//////////////////////////////////////////////////////////////////////////////
function getBlockCoord()
{
    
    if(start)
    {
     
        
        stratX3=(Math.floor((op1x+op1vx)));
        stratY3=(Math.floor((op1y+op1vy)));
        speed=100;
        start=false;
        return;
    }
    
    if(getBlockTarget()==1)
    {
          printErr("block target is opp1")
       
        t=Math.abs(Math.hypot(op1x-p2x, op1y-p2y))/667;
        
        stratX3=(Math.floor((op1x+op1vx*t)));
        stratY3=(Math.floor((op1y+op1vy*t)));
        speed=100;
        
        if(p2DistToTarget<100)
        
        {
            speed="SHIELD";
        }
        
        return;
    }
    
   
    else
    {
        printErr("block target is opp2")
        
         t=Math.abs(Math.hypot(op2x-p2x, op2y-p2y))/667;
         stratX3=(Math.floor((op2x+op2vx*t)));
         stratY3=(Math.floor((op2y+op2vy*t)));
         speed=100;
          if(p2DistToTarget<100)
        {
            speed="SHIELD";
        }
         return;
    }
    
}
////////////////////////////////////////////////////////////////////////////////////////
function getOffset()
{
    ///ad v2 
    
    if(Target===0)
    {
        var v1 =
        {
            x:cpListx[checkpointCount-1]-cpListx[Target],
	        y:cpListy[checkpointCount-1]-cpListy[Target]
        };
    }
    
    else
    {
        var v1 =
        {
            x:cpListx[Target-1]-cpListx[Target],
	        y:cpListy[Target-1]-cpListy[Target]
        };
    }
    
    
    var v2 =
    {
        x:cpListx[(Target+1)%checkpointCount]-cpListx[Target],
	    y:cpListy[(Target+1)%checkpointCount]-cpListy[Target]
    };
   
      var v3 =
    {
        x:v2.x+v1.x,
	    y:v2.y+v1.y
    };
    
    var length = Math.sqrt(v3.x*v3.x+v3.y*v3.y);
    
    var unitVector = 
    {
        x:(v3.x/length)*-1,
        y:(v3.y/length)*-1
    };
    
    distOff=100;
    
    var offset = 
    {
        x:unitVector.x*distOff,
        y:unitVector.y*distOff
    };
    
    printErr(offset.x+" "+offset.y)
    return offset;
    
}
///////////////////////////////////////////////////////////////////////////////////////
// game loop
while (true) 

{
    for (var i = 0; i < 2; i++) 
    {
        var inputs = readline().split(' ');
        var x = parseInt(inputs[0]); // x position of your pod
        var y = parseInt(inputs[1]); // y position of your pod
        var vx = parseInt(inputs[2]); // x speed of your pod
        var vy = parseInt(inputs[3]); // y speed of your pod
        var angle = parseInt(inputs[4]); // angle of your pod
        var nextCheckPointId = parseInt(inputs[5]); // next check point id of your pod'
        
        if (i==0)
        {
            p1vx=vx;
            p1vy=vy;
            p1x=x;
            p1y=y;
            p1Nextcp=nextCheckPointId;
            angle1=angle;
              if(p1Nextcp!=p1Prevcp)
            {
                p1RoundPassed++;
            }
            
            //printErr("true p1cp "+nextCheckPointId)
        }
        
        else if(i==1)
        {
            p2vx=vx;
            p2vy=vy;
            p2x=x;
            p2y=y;
            p2Nextcp=nextCheckPointId;
            angle2=angle;
            //printErr("true p2cp "+nextCheckPointId)
        }
    }
    for (var i = 0; i < 2; i++)
    {
        var inputs = readline().split(' ');
        var x2 = parseInt(inputs[0]); // x position of the opponent's pod
        var y2 = parseInt(inputs[1]); // y position of the opponent's pod
        var vx2 = parseInt(inputs[2]); // x speed of the opponent's pod
        var vy2 = parseInt(inputs[3]); // y speed of the opponent's pod
        var angle2 = parseInt(inputs[4]); // angle of the opponent's pod
        var nextCheckPointId2 = parseInt(inputs[5]); // next check point id of the opponent's pod
        
         
        if (i==0)
        {
            op1vx=vx2;
            op1vy=vy2;
            op1x=x2;
            op1y=y2;
            op1Nextcp=nextCheckPointId2;
            oangle1=angle2;
            
            if(op1Nextcp==0&&op1Prevcp!=0)
            {
                opp1Round++;
            }
            
             if(op1Nextcp!=op1Prevcp)
            {
                op1RoundPassed++;
            }
            
            
        }
        
        else if(i==1)
        {
            op2vx=vx2;
            op2vy=vy2;
            op2x=x2;
            op2y=y2;
            op2Nextcp=nextCheckPointId2;
            oangle2=angle2;
             if(op2Nextcp==0&&op2Prevcp!=0)
            {
                opp2Round++;
            }
            
            
             if(op2Nextcp!=op2Prevcp)
            {
                op2RoundPassed++;
            }
            
        }
    }
    
    
    //todo replace p1nextcp depending on podID in getSafeSpace function
    var p1Dist= Math.hypot(cpListx[p1Nextcp]-p1x, cpListy[p1Nextcp]-p1y);
    var p2Dist= Math.hypot(cpListx[p2Nextcp]-p2x, cpListy[p2Nextcp]-p2y);
    
    var op1Distp1= Math.hypot(cpListx[p1Nextcp]-op1x, cpListy[p1Nextcp]-op1y);
    var op2Distp1= Math.hypot(cpListx[p1Nextcp]-op2x, cpListy[p1Nextcp]-op2y);
    var p2Distp1= Math.hypot(cpListx[p1Nextcp]-p2x, cpListy[p1Nextcp]-p2y);
    
    var op2Dist= Math.hypot(cpListx[op2Nextcp]-op2x, cpListy[op2Nextcp]-op2y);
    var op1Dist= Math.hypot(cpListx[op1Nextcp]-op1x, cpListy[op1Nextcp]-op1y); 
    
    var p1vel= Math.hypot(p1vx,p1vy);
    var p2vel= Math.hypot(p2vx,p2vy);
    
    
    var angleDeg = Math.atan2(cpListy[p1Nextcp]-p1y - (p1vy), cpListx[p1Nextcp]-p1x - (p1vx)) * 180 / Math.PI;
    
    var angleDegCp = (-angle1- angleDeg);
    
   
    //printErr("test "+checkpointCount+" "+p1Nextcp+" "+p1Dist+" "+p1vel)
   
   // calculate cp angle with trianglulation use prev cp and next cp to calc entrance angle for current cp
   //printErr("op1Distp1 "+op1Distp1)
    var p1SafeSpace;
  
   if(op1Distp1>p1Dist+1500&&op2Distp1>p1Dist+1500&&p2Distp1>p1Dist+1500)
   {
      
      p1SafeSpace=Math.floor(5*p1vel);
       
       
   }
   
   else
   {
       p1SafeSpace=700;
   }
   //todo write code that check if other pods are nearby and only execute premature cp switch based on that or make it dynamic
    

   
   if(p1Dist<p1SafeSpace)
    {
        p1Nextcp=(p1Nextcp+1)%checkpointCount;
    }
    
    
     //printErr("test2 "+checkpointCount+" "+p2Nextcp+" "+p2Dist+" "+p2vel)
   

   
   /*
   
    if(p2Dist<3*p2vel)
    {
        p2Nextcp=(p2Nextcp+1)%checkpointCount;
    }*/
    
  
  
   
   
   // printErr("p1Dist "+p1Dist);
    
   
   
 /*   
    var p1_angle =Math.atan2(p1x,p1y)*(180/Math.PI);
    var p2_angle =Math.atan2(p2x,p2y)*(180/Math.PI);
    
    var cp1_angle =Math.atan2(cpListx[p1Nextcp],cpListy[p1Nextcp])*(180/Math.PI);
    var cp2_angle =Math.atan2(cpListx[p2Nextcp],cpListy[p2Nextcp])*(180/Math.PI);
    
    var p1cp1_angle=Math.abs(p1_angle-cp1_angle);
    var p2cp2_angle=Math.abs(p2_angle-cp2_angle);
*/
    
    
   
    var stratX1=(cpListx[p1Nextcp]-(3*p1vx));
    var stratY1=(cpListy[p1Nextcp]-(3*p1vy));
    var stratX2=(cpListx[p2Nextcp]-(3*p2vx));
    var stratY2=(cpListy[p2Nextcp]-(3*p2vy));
    
    //var stratX3=(cpListx[p2Nextcp]-(3*p2vx));
    //var stratY3=(cpListy[p2Nextcp]-(3*p2vy));
   // var stratX3=((op2x+p2vx)-3*p2vx);
   // var stratY3=((op2y+p2vy)-3*p2vy);
    
   
    printErr("p1Nextcp "+p1Nextcp);
   // printErr("p2Nextcp "+p2Nextcp);
    //printErr("stratY1 "+stratY1);
    //printErr("stratX1 "+stratX1);
   // printErr("angle1 "+angle1);
   // printErr("angle2 "+angle2);
    
    //getBlockTarget();
    //getBlockCoord();
    
    if(p1Dist>3000)
    {
        p1speed="BOOST";
    }
    else
    {
        p1speed="100";
    }
    /*
    if(checkpointCount<=4||p1RoundPassed>op1RoundPassed&&p1RoundPassed>op2RoundPassed)
    {
        p1Lead=true;
        getBlockCoord()
    }
    else
    {
        p1Lead=false;
        getBlockCp();
    }
    */
    getOffset();
    printErr("offset "+offset.x+" "+offset.y);
    printErr("getcpangle "+getCpAngle());
    printErr("getcpp1angle "+getCpP1Angle());
    getBlockCp()
    //speed=100;
    print(stratX1+" "+stratY1+" "+p1speed);
    print(stratX3+" "+stratY3+" "+speed);
    
    p2cp=0;
    p1cp=0;
    
    p1Prevcp = p1Nextcp;
    op1Prevcp = op1Nextcp;
    op2Prevcp = op2Nextcp;
}
